// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mrm/ent/meeting"
	"mrm/ent/meetingdateroom"
	"mrm/ent/room"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MeetingDateRoomCreate is the builder for creating a MeetingDateRoom entity.
type MeetingDateRoomCreate struct {
	config
	mutation *MeetingDateRoomMutation
	hooks    []Hook
}

// SetDate sets the "date" field.
func (mdrc *MeetingDateRoomCreate) SetDate(i int) *MeetingDateRoomCreate {
	mdrc.mutation.SetDate(i)
	return mdrc
}

// SetStartTime sets the "start_time" field.
func (mdrc *MeetingDateRoomCreate) SetStartTime(i int) *MeetingDateRoomCreate {
	mdrc.mutation.SetStartTime(i)
	return mdrc
}

// SetEndTime sets the "end_time" field.
func (mdrc *MeetingDateRoomCreate) SetEndTime(i int) *MeetingDateRoomCreate {
	mdrc.mutation.SetEndTime(i)
	return mdrc
}

// SetMeetingID sets the "meeting" edge to the Meeting entity by ID.
func (mdrc *MeetingDateRoomCreate) SetMeetingID(id int) *MeetingDateRoomCreate {
	mdrc.mutation.SetMeetingID(id)
	return mdrc
}

// SetNillableMeetingID sets the "meeting" edge to the Meeting entity by ID if the given value is not nil.
func (mdrc *MeetingDateRoomCreate) SetNillableMeetingID(id *int) *MeetingDateRoomCreate {
	if id != nil {
		mdrc = mdrc.SetMeetingID(*id)
	}
	return mdrc
}

// SetMeeting sets the "meeting" edge to the Meeting entity.
func (mdrc *MeetingDateRoomCreate) SetMeeting(m *Meeting) *MeetingDateRoomCreate {
	return mdrc.SetMeetingID(m.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (mdrc *MeetingDateRoomCreate) SetRoomID(id int) *MeetingDateRoomCreate {
	mdrc.mutation.SetRoomID(id)
	return mdrc
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (mdrc *MeetingDateRoomCreate) SetNillableRoomID(id *int) *MeetingDateRoomCreate {
	if id != nil {
		mdrc = mdrc.SetRoomID(*id)
	}
	return mdrc
}

// SetRoom sets the "room" edge to the Room entity.
func (mdrc *MeetingDateRoomCreate) SetRoom(r *Room) *MeetingDateRoomCreate {
	return mdrc.SetRoomID(r.ID)
}

// Mutation returns the MeetingDateRoomMutation object of the builder.
func (mdrc *MeetingDateRoomCreate) Mutation() *MeetingDateRoomMutation {
	return mdrc.mutation
}

// Save creates the MeetingDateRoom in the database.
func (mdrc *MeetingDateRoomCreate) Save(ctx context.Context) (*MeetingDateRoom, error) {
	return withHooks(ctx, mdrc.sqlSave, mdrc.mutation, mdrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mdrc *MeetingDateRoomCreate) SaveX(ctx context.Context) *MeetingDateRoom {
	v, err := mdrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdrc *MeetingDateRoomCreate) Exec(ctx context.Context) error {
	_, err := mdrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdrc *MeetingDateRoomCreate) ExecX(ctx context.Context) {
	if err := mdrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mdrc *MeetingDateRoomCreate) check() error {
	if _, ok := mdrc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "MeetingDateRoom.date"`)}
	}
	if _, ok := mdrc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "MeetingDateRoom.start_time"`)}
	}
	if _, ok := mdrc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "MeetingDateRoom.end_time"`)}
	}
	return nil
}

func (mdrc *MeetingDateRoomCreate) sqlSave(ctx context.Context) (*MeetingDateRoom, error) {
	if err := mdrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mdrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mdrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mdrc.mutation.id = &_node.ID
	mdrc.mutation.done = true
	return _node, nil
}

func (mdrc *MeetingDateRoomCreate) createSpec() (*MeetingDateRoom, *sqlgraph.CreateSpec) {
	var (
		_node = &MeetingDateRoom{config: mdrc.config}
		_spec = sqlgraph.NewCreateSpec(meetingdateroom.Table, sqlgraph.NewFieldSpec(meetingdateroom.FieldID, field.TypeInt))
	)
	if value, ok := mdrc.mutation.Date(); ok {
		_spec.SetField(meetingdateroom.FieldDate, field.TypeInt, value)
		_node.Date = value
	}
	if value, ok := mdrc.mutation.StartTime(); ok {
		_spec.SetField(meetingdateroom.FieldStartTime, field.TypeInt, value)
		_node.StartTime = value
	}
	if value, ok := mdrc.mutation.EndTime(); ok {
		_spec.SetField(meetingdateroom.FieldEndTime, field.TypeInt, value)
		_node.EndTime = value
	}
	if nodes := mdrc.mutation.MeetingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meetingdateroom.MeetingTable,
			Columns: []string{meetingdateroom.MeetingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meeting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.meeting_mdrs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mdrc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meetingdateroom.RoomTable,
			Columns: []string{meetingdateroom.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.room_mdrs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MeetingDateRoomCreateBulk is the builder for creating many MeetingDateRoom entities in bulk.
type MeetingDateRoomCreateBulk struct {
	config
	err      error
	builders []*MeetingDateRoomCreate
}

// Save creates the MeetingDateRoom entities in the database.
func (mdrcb *MeetingDateRoomCreateBulk) Save(ctx context.Context) ([]*MeetingDateRoom, error) {
	if mdrcb.err != nil {
		return nil, mdrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mdrcb.builders))
	nodes := make([]*MeetingDateRoom, len(mdrcb.builders))
	mutators := make([]Mutator, len(mdrcb.builders))
	for i := range mdrcb.builders {
		func(i int, root context.Context) {
			builder := mdrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MeetingDateRoomMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mdrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mdrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mdrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mdrcb *MeetingDateRoomCreateBulk) SaveX(ctx context.Context) []*MeetingDateRoom {
	v, err := mdrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdrcb *MeetingDateRoomCreateBulk) Exec(ctx context.Context) error {
	_, err := mdrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdrcb *MeetingDateRoomCreateBulk) ExecX(ctx context.Context) {
	if err := mdrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
