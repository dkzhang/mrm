// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mrm/ent/meeting"
	"mrm/ent/meetingdateroom"
	"mrm/ent/room"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MeetingDateRoom is the model entity for the MeetingDateRoom schema.
type MeetingDateRoom struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date holds the value of the "date" field.
	Date int `json:"date,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime int `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime int `json:"end_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MeetingDateRoomQuery when eager-loading is set.
	Edges        MeetingDateRoomEdges `json:"edges"`
	meeting_mdrs *int64
	room_mdrs    *int
	selectValues sql.SelectValues
}

// MeetingDateRoomEdges holds the relations/edges for other nodes in the graph.
type MeetingDateRoomEdges struct {
	// Meeting holds the value of the meeting edge.
	Meeting *Meeting `json:"meeting,omitempty"`
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MeetingOrErr returns the Meeting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MeetingDateRoomEdges) MeetingOrErr() (*Meeting, error) {
	if e.loadedTypes[0] {
		if e.Meeting == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: meeting.Label}
		}
		return e.Meeting, nil
	}
	return nil, &NotLoadedError{edge: "meeting"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MeetingDateRoomEdges) RoomOrErr() (*Room, error) {
	if e.loadedTypes[1] {
		if e.Room == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "room"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MeetingDateRoom) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case meetingdateroom.FieldID, meetingdateroom.FieldDate, meetingdateroom.FieldStartTime, meetingdateroom.FieldEndTime:
			values[i] = new(sql.NullInt64)
		case meetingdateroom.ForeignKeys[0]: // meeting_mdrs
			values[i] = new(sql.NullInt64)
		case meetingdateroom.ForeignKeys[1]: // room_mdrs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MeetingDateRoom fields.
func (mdr *MeetingDateRoom) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case meetingdateroom.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mdr.ID = int(value.Int64)
		case meetingdateroom.FieldDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				mdr.Date = int(value.Int64)
			}
		case meetingdateroom.FieldStartTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				mdr.StartTime = int(value.Int64)
			}
		case meetingdateroom.FieldEndTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				mdr.EndTime = int(value.Int64)
			}
		case meetingdateroom.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field meeting_mdrs", value)
			} else if value.Valid {
				mdr.meeting_mdrs = new(int64)
				*mdr.meeting_mdrs = int64(value.Int64)
			}
		case meetingdateroom.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field room_mdrs", value)
			} else if value.Valid {
				mdr.room_mdrs = new(int)
				*mdr.room_mdrs = int(value.Int64)
			}
		default:
			mdr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MeetingDateRoom.
// This includes values selected through modifiers, order, etc.
func (mdr *MeetingDateRoom) Value(name string) (ent.Value, error) {
	return mdr.selectValues.Get(name)
}

// QueryMeeting queries the "meeting" edge of the MeetingDateRoom entity.
func (mdr *MeetingDateRoom) QueryMeeting() *MeetingQuery {
	return NewMeetingDateRoomClient(mdr.config).QueryMeeting(mdr)
}

// QueryRoom queries the "room" edge of the MeetingDateRoom entity.
func (mdr *MeetingDateRoom) QueryRoom() *RoomQuery {
	return NewMeetingDateRoomClient(mdr.config).QueryRoom(mdr)
}

// Update returns a builder for updating this MeetingDateRoom.
// Note that you need to call MeetingDateRoom.Unwrap() before calling this method if this MeetingDateRoom
// was returned from a transaction, and the transaction was committed or rolled back.
func (mdr *MeetingDateRoom) Update() *MeetingDateRoomUpdateOne {
	return NewMeetingDateRoomClient(mdr.config).UpdateOne(mdr)
}

// Unwrap unwraps the MeetingDateRoom entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mdr *MeetingDateRoom) Unwrap() *MeetingDateRoom {
	_tx, ok := mdr.config.driver.(*txDriver)
	if !ok {
		panic("ent: MeetingDateRoom is not a transactional entity")
	}
	mdr.config.driver = _tx.drv
	return mdr
}

// String implements the fmt.Stringer.
func (mdr *MeetingDateRoom) String() string {
	var builder strings.Builder
	builder.WriteString("MeetingDateRoom(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mdr.ID))
	builder.WriteString("date=")
	builder.WriteString(fmt.Sprintf("%v", mdr.Date))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(fmt.Sprintf("%v", mdr.StartTime))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(fmt.Sprintf("%v", mdr.EndTime))
	builder.WriteByte(')')
	return builder.String()
}

// MeetingDateRooms is a parsable slice of MeetingDateRoom.
type MeetingDateRooms []*MeetingDateRoom
