// Code generated by ent, DO NOT EDIT.

package meetingdateroom

import (
	"mrm/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldLTE(FieldID, id))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldEQ(FieldDate, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldEQ(FieldEndTime, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldLTE(FieldDate, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v int) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.FieldLTE(FieldEndTime, v))
}

// HasMeeting applies the HasEdge predicate on the "meeting" edge.
func HasMeeting() predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MeetingTable, MeetingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMeetingWith applies the HasEdge predicate on the "meeting" edge with a given conditions (other predicates).
func HasMeetingWith(preds ...predicate.Meeting) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(func(s *sql.Selector) {
		step := newMeetingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoom applies the HasEdge predicate on the "room" edge.
func HasRoom() predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomWith applies the HasEdge predicate on the "room" edge with a given conditions (other predicates).
func HasRoomWith(preds ...predicate.Room) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(func(s *sql.Selector) {
		step := newRoomStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MeetingDateRoom) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MeetingDateRoom) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MeetingDateRoom) predicate.MeetingDateRoom {
	return predicate.MeetingDateRoom(sql.NotPredicates(p))
}
