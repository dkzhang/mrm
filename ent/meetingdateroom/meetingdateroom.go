// Code generated by ent, DO NOT EDIT.

package meetingdateroom

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the meetingdateroom type in the database.
	Label = "meeting_date_room"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// EdgeMeeting holds the string denoting the meeting edge name in mutations.
	EdgeMeeting = "meeting"
	// EdgeRoom holds the string denoting the room edge name in mutations.
	EdgeRoom = "room"
	// Table holds the table name of the meetingdateroom in the database.
	Table = "meeting_date_rooms"
	// MeetingTable is the table that holds the meeting relation/edge.
	MeetingTable = "meeting_date_rooms"
	// MeetingInverseTable is the table name for the Meeting entity.
	// It exists in this package in order to avoid circular dependency with the "meeting" package.
	MeetingInverseTable = "meetings"
	// MeetingColumn is the table column denoting the meeting relation/edge.
	MeetingColumn = "meeting_mdrs"
	// RoomTable is the table that holds the room relation/edge.
	RoomTable = "meeting_date_rooms"
	// RoomInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	RoomInverseTable = "rooms"
	// RoomColumn is the table column denoting the room relation/edge.
	RoomColumn = "room_mdrs"
)

// Columns holds all SQL columns for meetingdateroom fields.
var Columns = []string{
	FieldID,
	FieldDate,
	FieldStartTime,
	FieldEndTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "meeting_date_rooms"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"meeting_mdrs",
	"room_mdrs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the MeetingDateRoom queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByMeetingField orders the results by meeting field.
func ByMeetingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMeetingStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoomField orders the results by room field.
func ByRoomField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomStep(), sql.OrderByField(field, opts...))
	}
}
func newMeetingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MeetingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MeetingTable, MeetingColumn),
	)
}
func newRoomStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoomTable, RoomColumn),
	)
}
