// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mrm/ent/meeting"
	"mrm/ent/meetingdateroom"
	"mrm/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MeetingUpdate is the builder for updating Meeting entities.
type MeetingUpdate struct {
	config
	hooks    []Hook
	mutation *MeetingMutation
}

// Where appends a list predicates to the MeetingUpdate builder.
func (mu *MeetingUpdate) Where(ps ...predicate.Meeting) *MeetingUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MeetingUpdate) SetName(s string) *MeetingUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MeetingUpdate) SetNillableName(s *string) *MeetingUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetApplicant sets the "applicant" field.
func (mu *MeetingUpdate) SetApplicant(s string) *MeetingUpdate {
	mu.mutation.SetApplicant(s)
	return mu
}

// SetNillableApplicant sets the "applicant" field if the given value is not nil.
func (mu *MeetingUpdate) SetNillableApplicant(s *string) *MeetingUpdate {
	if s != nil {
		mu.SetApplicant(*s)
	}
	return mu
}

// AddMdrIDs adds the "mdrs" edge to the MeetingDateRoom entity by IDs.
func (mu *MeetingUpdate) AddMdrIDs(ids ...int) *MeetingUpdate {
	mu.mutation.AddMdrIDs(ids...)
	return mu
}

// AddMdrs adds the "mdrs" edges to the MeetingDateRoom entity.
func (mu *MeetingUpdate) AddMdrs(m ...*MeetingDateRoom) *MeetingUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMdrIDs(ids...)
}

// Mutation returns the MeetingMutation object of the builder.
func (mu *MeetingUpdate) Mutation() *MeetingMutation {
	return mu.mutation
}

// ClearMdrs clears all "mdrs" edges to the MeetingDateRoom entity.
func (mu *MeetingUpdate) ClearMdrs() *MeetingUpdate {
	mu.mutation.ClearMdrs()
	return mu
}

// RemoveMdrIDs removes the "mdrs" edge to MeetingDateRoom entities by IDs.
func (mu *MeetingUpdate) RemoveMdrIDs(ids ...int) *MeetingUpdate {
	mu.mutation.RemoveMdrIDs(ids...)
	return mu
}

// RemoveMdrs removes "mdrs" edges to MeetingDateRoom entities.
func (mu *MeetingUpdate) RemoveMdrs(m ...*MeetingDateRoom) *MeetingUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMdrIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MeetingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MeetingUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MeetingUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MeetingUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MeetingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(meeting.Table, meeting.Columns, sqlgraph.NewFieldSpec(meeting.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(meeting.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Applicant(); ok {
		_spec.SetField(meeting.FieldApplicant, field.TypeString, value)
	}
	if mu.mutation.MdrsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meeting.MdrsTable,
			Columns: []string{meeting.MdrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingdateroom.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMdrsIDs(); len(nodes) > 0 && !mu.mutation.MdrsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meeting.MdrsTable,
			Columns: []string{meeting.MdrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingdateroom.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MdrsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meeting.MdrsTable,
			Columns: []string{meeting.MdrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingdateroom.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meeting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MeetingUpdateOne is the builder for updating a single Meeting entity.
type MeetingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MeetingMutation
}

// SetName sets the "name" field.
func (muo *MeetingUpdateOne) SetName(s string) *MeetingUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MeetingUpdateOne) SetNillableName(s *string) *MeetingUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetApplicant sets the "applicant" field.
func (muo *MeetingUpdateOne) SetApplicant(s string) *MeetingUpdateOne {
	muo.mutation.SetApplicant(s)
	return muo
}

// SetNillableApplicant sets the "applicant" field if the given value is not nil.
func (muo *MeetingUpdateOne) SetNillableApplicant(s *string) *MeetingUpdateOne {
	if s != nil {
		muo.SetApplicant(*s)
	}
	return muo
}

// AddMdrIDs adds the "mdrs" edge to the MeetingDateRoom entity by IDs.
func (muo *MeetingUpdateOne) AddMdrIDs(ids ...int) *MeetingUpdateOne {
	muo.mutation.AddMdrIDs(ids...)
	return muo
}

// AddMdrs adds the "mdrs" edges to the MeetingDateRoom entity.
func (muo *MeetingUpdateOne) AddMdrs(m ...*MeetingDateRoom) *MeetingUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMdrIDs(ids...)
}

// Mutation returns the MeetingMutation object of the builder.
func (muo *MeetingUpdateOne) Mutation() *MeetingMutation {
	return muo.mutation
}

// ClearMdrs clears all "mdrs" edges to the MeetingDateRoom entity.
func (muo *MeetingUpdateOne) ClearMdrs() *MeetingUpdateOne {
	muo.mutation.ClearMdrs()
	return muo
}

// RemoveMdrIDs removes the "mdrs" edge to MeetingDateRoom entities by IDs.
func (muo *MeetingUpdateOne) RemoveMdrIDs(ids ...int) *MeetingUpdateOne {
	muo.mutation.RemoveMdrIDs(ids...)
	return muo
}

// RemoveMdrs removes "mdrs" edges to MeetingDateRoom entities.
func (muo *MeetingUpdateOne) RemoveMdrs(m ...*MeetingDateRoom) *MeetingUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMdrIDs(ids...)
}

// Where appends a list predicates to the MeetingUpdate builder.
func (muo *MeetingUpdateOne) Where(ps ...predicate.Meeting) *MeetingUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MeetingUpdateOne) Select(field string, fields ...string) *MeetingUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Meeting entity.
func (muo *MeetingUpdateOne) Save(ctx context.Context) (*Meeting, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MeetingUpdateOne) SaveX(ctx context.Context) *Meeting {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MeetingUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MeetingUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MeetingUpdateOne) sqlSave(ctx context.Context) (_node *Meeting, err error) {
	_spec := sqlgraph.NewUpdateSpec(meeting.Table, meeting.Columns, sqlgraph.NewFieldSpec(meeting.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Meeting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, meeting.FieldID)
		for _, f := range fields {
			if !meeting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != meeting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(meeting.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Applicant(); ok {
		_spec.SetField(meeting.FieldApplicant, field.TypeString, value)
	}
	if muo.mutation.MdrsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meeting.MdrsTable,
			Columns: []string{meeting.MdrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingdateroom.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMdrsIDs(); len(nodes) > 0 && !muo.mutation.MdrsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meeting.MdrsTable,
			Columns: []string{meeting.MdrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingdateroom.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MdrsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meeting.MdrsTable,
			Columns: []string{meeting.MdrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(meetingdateroom.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Meeting{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meeting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
