// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mrm/ent/meeting"
	"mrm/ent/meetingdateroom"
	"mrm/ent/predicate"
	"mrm/ent/room"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMeeting         = "Meeting"
	TypeMeetingDateRoom = "MeetingDateRoom"
	TypeRoom            = "Room"
)

// MeetingMutation represents an operation that mutates the Meeting nodes in the graph.
type MeetingMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	applicant     *string
	clearedFields map[string]struct{}
	mdrs          map[int]struct{}
	removedmdrs   map[int]struct{}
	clearedmdrs   bool
	done          bool
	oldValue      func(context.Context) (*Meeting, error)
	predicates    []predicate.Meeting
}

var _ ent.Mutation = (*MeetingMutation)(nil)

// meetingOption allows management of the mutation configuration using functional options.
type meetingOption func(*MeetingMutation)

// newMeetingMutation creates new mutation for the Meeting entity.
func newMeetingMutation(c config, op Op, opts ...meetingOption) *MeetingMutation {
	m := &MeetingMutation{
		config:        c,
		op:            op,
		typ:           TypeMeeting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMeetingID sets the ID field of the mutation.
func withMeetingID(id int64) meetingOption {
	return func(m *MeetingMutation) {
		var (
			err   error
			once  sync.Once
			value *Meeting
		)
		m.oldValue = func(ctx context.Context) (*Meeting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Meeting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMeeting sets the old Meeting of the mutation.
func withMeeting(node *Meeting) meetingOption {
	return func(m *MeetingMutation) {
		m.oldValue = func(context.Context) (*Meeting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MeetingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MeetingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Meeting entities.
func (m *MeetingMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MeetingMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MeetingMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Meeting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MeetingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MeetingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Meeting entity.
// If the Meeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeetingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MeetingMutation) ResetName() {
	m.name = nil
}

// SetApplicant sets the "applicant" field.
func (m *MeetingMutation) SetApplicant(s string) {
	m.applicant = &s
}

// Applicant returns the value of the "applicant" field in the mutation.
func (m *MeetingMutation) Applicant() (r string, exists bool) {
	v := m.applicant
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicant returns the old "applicant" field's value of the Meeting entity.
// If the Meeting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeetingMutation) OldApplicant(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicant is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicant requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicant: %w", err)
	}
	return oldValue.Applicant, nil
}

// ResetApplicant resets all changes to the "applicant" field.
func (m *MeetingMutation) ResetApplicant() {
	m.applicant = nil
}

// AddMdrIDs adds the "mdrs" edge to the MeetingDateRoom entity by ids.
func (m *MeetingMutation) AddMdrIDs(ids ...int) {
	if m.mdrs == nil {
		m.mdrs = make(map[int]struct{})
	}
	for i := range ids {
		m.mdrs[ids[i]] = struct{}{}
	}
}

// ClearMdrs clears the "mdrs" edge to the MeetingDateRoom entity.
func (m *MeetingMutation) ClearMdrs() {
	m.clearedmdrs = true
}

// MdrsCleared reports if the "mdrs" edge to the MeetingDateRoom entity was cleared.
func (m *MeetingMutation) MdrsCleared() bool {
	return m.clearedmdrs
}

// RemoveMdrIDs removes the "mdrs" edge to the MeetingDateRoom entity by IDs.
func (m *MeetingMutation) RemoveMdrIDs(ids ...int) {
	if m.removedmdrs == nil {
		m.removedmdrs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.mdrs, ids[i])
		m.removedmdrs[ids[i]] = struct{}{}
	}
}

// RemovedMdrs returns the removed IDs of the "mdrs" edge to the MeetingDateRoom entity.
func (m *MeetingMutation) RemovedMdrsIDs() (ids []int) {
	for id := range m.removedmdrs {
		ids = append(ids, id)
	}
	return
}

// MdrsIDs returns the "mdrs" edge IDs in the mutation.
func (m *MeetingMutation) MdrsIDs() (ids []int) {
	for id := range m.mdrs {
		ids = append(ids, id)
	}
	return
}

// ResetMdrs resets all changes to the "mdrs" edge.
func (m *MeetingMutation) ResetMdrs() {
	m.mdrs = nil
	m.clearedmdrs = false
	m.removedmdrs = nil
}

// Where appends a list predicates to the MeetingMutation builder.
func (m *MeetingMutation) Where(ps ...predicate.Meeting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MeetingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MeetingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Meeting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MeetingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MeetingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Meeting).
func (m *MeetingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MeetingMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, meeting.FieldName)
	}
	if m.applicant != nil {
		fields = append(fields, meeting.FieldApplicant)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MeetingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case meeting.FieldName:
		return m.Name()
	case meeting.FieldApplicant:
		return m.Applicant()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MeetingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case meeting.FieldName:
		return m.OldName(ctx)
	case meeting.FieldApplicant:
		return m.OldApplicant(ctx)
	}
	return nil, fmt.Errorf("unknown Meeting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MeetingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case meeting.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case meeting.FieldApplicant:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicant(v)
		return nil
	}
	return fmt.Errorf("unknown Meeting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MeetingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MeetingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MeetingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Meeting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MeetingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MeetingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MeetingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Meeting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MeetingMutation) ResetField(name string) error {
	switch name {
	case meeting.FieldName:
		m.ResetName()
		return nil
	case meeting.FieldApplicant:
		m.ResetApplicant()
		return nil
	}
	return fmt.Errorf("unknown Meeting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MeetingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.mdrs != nil {
		edges = append(edges, meeting.EdgeMdrs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MeetingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case meeting.EdgeMdrs:
		ids := make([]ent.Value, 0, len(m.mdrs))
		for id := range m.mdrs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MeetingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmdrs != nil {
		edges = append(edges, meeting.EdgeMdrs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MeetingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case meeting.EdgeMdrs:
		ids := make([]ent.Value, 0, len(m.removedmdrs))
		for id := range m.removedmdrs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MeetingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmdrs {
		edges = append(edges, meeting.EdgeMdrs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MeetingMutation) EdgeCleared(name string) bool {
	switch name {
	case meeting.EdgeMdrs:
		return m.clearedmdrs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MeetingMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Meeting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MeetingMutation) ResetEdge(name string) error {
	switch name {
	case meeting.EdgeMdrs:
		m.ResetMdrs()
		return nil
	}
	return fmt.Errorf("unknown Meeting edge %s", name)
}

// MeetingDateRoomMutation represents an operation that mutates the MeetingDateRoom nodes in the graph.
type MeetingDateRoomMutation struct {
	config
	op             Op
	typ            string
	id             *int
	date           *int
	adddate        *int
	start_time     *int
	addstart_time  *int
	end_time       *int
	addend_time    *int
	clearedFields  map[string]struct{}
	meeting        *int64
	clearedmeeting bool
	room           *int
	clearedroom    bool
	done           bool
	oldValue       func(context.Context) (*MeetingDateRoom, error)
	predicates     []predicate.MeetingDateRoom
}

var _ ent.Mutation = (*MeetingDateRoomMutation)(nil)

// meetingdateroomOption allows management of the mutation configuration using functional options.
type meetingdateroomOption func(*MeetingDateRoomMutation)

// newMeetingDateRoomMutation creates new mutation for the MeetingDateRoom entity.
func newMeetingDateRoomMutation(c config, op Op, opts ...meetingdateroomOption) *MeetingDateRoomMutation {
	m := &MeetingDateRoomMutation{
		config:        c,
		op:            op,
		typ:           TypeMeetingDateRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMeetingDateRoomID sets the ID field of the mutation.
func withMeetingDateRoomID(id int) meetingdateroomOption {
	return func(m *MeetingDateRoomMutation) {
		var (
			err   error
			once  sync.Once
			value *MeetingDateRoom
		)
		m.oldValue = func(ctx context.Context) (*MeetingDateRoom, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MeetingDateRoom.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMeetingDateRoom sets the old MeetingDateRoom of the mutation.
func withMeetingDateRoom(node *MeetingDateRoom) meetingdateroomOption {
	return func(m *MeetingDateRoomMutation) {
		m.oldValue = func(context.Context) (*MeetingDateRoom, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MeetingDateRoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MeetingDateRoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MeetingDateRoomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MeetingDateRoomMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MeetingDateRoom.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDate sets the "date" field.
func (m *MeetingDateRoomMutation) SetDate(i int) {
	m.date = &i
	m.adddate = nil
}

// Date returns the value of the "date" field in the mutation.
func (m *MeetingDateRoomMutation) Date() (r int, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the MeetingDateRoom entity.
// If the MeetingDateRoom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeetingDateRoomMutation) OldDate(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// AddDate adds i to the "date" field.
func (m *MeetingDateRoomMutation) AddDate(i int) {
	if m.adddate != nil {
		*m.adddate += i
	} else {
		m.adddate = &i
	}
}

// AddedDate returns the value that was added to the "date" field in this mutation.
func (m *MeetingDateRoomMutation) AddedDate() (r int, exists bool) {
	v := m.adddate
	if v == nil {
		return
	}
	return *v, true
}

// ResetDate resets all changes to the "date" field.
func (m *MeetingDateRoomMutation) ResetDate() {
	m.date = nil
	m.adddate = nil
}

// SetStartTime sets the "start_time" field.
func (m *MeetingDateRoomMutation) SetStartTime(i int) {
	m.start_time = &i
	m.addstart_time = nil
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *MeetingDateRoomMutation) StartTime() (r int, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the MeetingDateRoom entity.
// If the MeetingDateRoom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeetingDateRoomMutation) OldStartTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// AddStartTime adds i to the "start_time" field.
func (m *MeetingDateRoomMutation) AddStartTime(i int) {
	if m.addstart_time != nil {
		*m.addstart_time += i
	} else {
		m.addstart_time = &i
	}
}

// AddedStartTime returns the value that was added to the "start_time" field in this mutation.
func (m *MeetingDateRoomMutation) AddedStartTime() (r int, exists bool) {
	v := m.addstart_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *MeetingDateRoomMutation) ResetStartTime() {
	m.start_time = nil
	m.addstart_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *MeetingDateRoomMutation) SetEndTime(i int) {
	m.end_time = &i
	m.addend_time = nil
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *MeetingDateRoomMutation) EndTime() (r int, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the MeetingDateRoom entity.
// If the MeetingDateRoom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeetingDateRoomMutation) OldEndTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// AddEndTime adds i to the "end_time" field.
func (m *MeetingDateRoomMutation) AddEndTime(i int) {
	if m.addend_time != nil {
		*m.addend_time += i
	} else {
		m.addend_time = &i
	}
}

// AddedEndTime returns the value that was added to the "end_time" field in this mutation.
func (m *MeetingDateRoomMutation) AddedEndTime() (r int, exists bool) {
	v := m.addend_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *MeetingDateRoomMutation) ResetEndTime() {
	m.end_time = nil
	m.addend_time = nil
}

// SetMeetingID sets the "meeting" edge to the Meeting entity by id.
func (m *MeetingDateRoomMutation) SetMeetingID(id int64) {
	m.meeting = &id
}

// ClearMeeting clears the "meeting" edge to the Meeting entity.
func (m *MeetingDateRoomMutation) ClearMeeting() {
	m.clearedmeeting = true
}

// MeetingCleared reports if the "meeting" edge to the Meeting entity was cleared.
func (m *MeetingDateRoomMutation) MeetingCleared() bool {
	return m.clearedmeeting
}

// MeetingID returns the "meeting" edge ID in the mutation.
func (m *MeetingDateRoomMutation) MeetingID() (id int64, exists bool) {
	if m.meeting != nil {
		return *m.meeting, true
	}
	return
}

// MeetingIDs returns the "meeting" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MeetingID instead. It exists only for internal usage by the builders.
func (m *MeetingDateRoomMutation) MeetingIDs() (ids []int64) {
	if id := m.meeting; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMeeting resets all changes to the "meeting" edge.
func (m *MeetingDateRoomMutation) ResetMeeting() {
	m.meeting = nil
	m.clearedmeeting = false
}

// SetRoomID sets the "room" edge to the Room entity by id.
func (m *MeetingDateRoomMutation) SetRoomID(id int) {
	m.room = &id
}

// ClearRoom clears the "room" edge to the Room entity.
func (m *MeetingDateRoomMutation) ClearRoom() {
	m.clearedroom = true
}

// RoomCleared reports if the "room" edge to the Room entity was cleared.
func (m *MeetingDateRoomMutation) RoomCleared() bool {
	return m.clearedroom
}

// RoomID returns the "room" edge ID in the mutation.
func (m *MeetingDateRoomMutation) RoomID() (id int, exists bool) {
	if m.room != nil {
		return *m.room, true
	}
	return
}

// RoomIDs returns the "room" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *MeetingDateRoomMutation) RoomIDs() (ids []int) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom resets all changes to the "room" edge.
func (m *MeetingDateRoomMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// Where appends a list predicates to the MeetingDateRoomMutation builder.
func (m *MeetingDateRoomMutation) Where(ps ...predicate.MeetingDateRoom) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MeetingDateRoomMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MeetingDateRoomMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MeetingDateRoom, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MeetingDateRoomMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MeetingDateRoomMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MeetingDateRoom).
func (m *MeetingDateRoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MeetingDateRoomMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.date != nil {
		fields = append(fields, meetingdateroom.FieldDate)
	}
	if m.start_time != nil {
		fields = append(fields, meetingdateroom.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, meetingdateroom.FieldEndTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MeetingDateRoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case meetingdateroom.FieldDate:
		return m.Date()
	case meetingdateroom.FieldStartTime:
		return m.StartTime()
	case meetingdateroom.FieldEndTime:
		return m.EndTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MeetingDateRoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case meetingdateroom.FieldDate:
		return m.OldDate(ctx)
	case meetingdateroom.FieldStartTime:
		return m.OldStartTime(ctx)
	case meetingdateroom.FieldEndTime:
		return m.OldEndTime(ctx)
	}
	return nil, fmt.Errorf("unknown MeetingDateRoom field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MeetingDateRoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case meetingdateroom.FieldDate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case meetingdateroom.FieldStartTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case meetingdateroom.FieldEndTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	}
	return fmt.Errorf("unknown MeetingDateRoom field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MeetingDateRoomMutation) AddedFields() []string {
	var fields []string
	if m.adddate != nil {
		fields = append(fields, meetingdateroom.FieldDate)
	}
	if m.addstart_time != nil {
		fields = append(fields, meetingdateroom.FieldStartTime)
	}
	if m.addend_time != nil {
		fields = append(fields, meetingdateroom.FieldEndTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MeetingDateRoomMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case meetingdateroom.FieldDate:
		return m.AddedDate()
	case meetingdateroom.FieldStartTime:
		return m.AddedStartTime()
	case meetingdateroom.FieldEndTime:
		return m.AddedEndTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MeetingDateRoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	case meetingdateroom.FieldDate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDate(v)
		return nil
	case meetingdateroom.FieldStartTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartTime(v)
		return nil
	case meetingdateroom.FieldEndTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndTime(v)
		return nil
	}
	return fmt.Errorf("unknown MeetingDateRoom numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MeetingDateRoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MeetingDateRoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MeetingDateRoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MeetingDateRoom nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MeetingDateRoomMutation) ResetField(name string) error {
	switch name {
	case meetingdateroom.FieldDate:
		m.ResetDate()
		return nil
	case meetingdateroom.FieldStartTime:
		m.ResetStartTime()
		return nil
	case meetingdateroom.FieldEndTime:
		m.ResetEndTime()
		return nil
	}
	return fmt.Errorf("unknown MeetingDateRoom field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MeetingDateRoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.meeting != nil {
		edges = append(edges, meetingdateroom.EdgeMeeting)
	}
	if m.room != nil {
		edges = append(edges, meetingdateroom.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MeetingDateRoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case meetingdateroom.EdgeMeeting:
		if id := m.meeting; id != nil {
			return []ent.Value{*id}
		}
	case meetingdateroom.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MeetingDateRoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MeetingDateRoomMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MeetingDateRoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmeeting {
		edges = append(edges, meetingdateroom.EdgeMeeting)
	}
	if m.clearedroom {
		edges = append(edges, meetingdateroom.EdgeRoom)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MeetingDateRoomMutation) EdgeCleared(name string) bool {
	switch name {
	case meetingdateroom.EdgeMeeting:
		return m.clearedmeeting
	case meetingdateroom.EdgeRoom:
		return m.clearedroom
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MeetingDateRoomMutation) ClearEdge(name string) error {
	switch name {
	case meetingdateroom.EdgeMeeting:
		m.ClearMeeting()
		return nil
	case meetingdateroom.EdgeRoom:
		m.ClearRoom()
		return nil
	}
	return fmt.Errorf("unknown MeetingDateRoom unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MeetingDateRoomMutation) ResetEdge(name string) error {
	switch name {
	case meetingdateroom.EdgeMeeting:
		m.ResetMeeting()
		return nil
	case meetingdateroom.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown MeetingDateRoom edge %s", name)
}

// RoomMutation represents an operation that mutates the Room nodes in the graph.
type RoomMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	mdrs          map[int]struct{}
	removedmdrs   map[int]struct{}
	clearedmdrs   bool
	done          bool
	oldValue      func(context.Context) (*Room, error)
	predicates    []predicate.Room
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows management of the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for the Room entity.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the ID field of the mutation.
func withRoomID(id int) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Room entities.
func (m *RoomMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoomMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Room.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RoomMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoomMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RoomMutation) ResetName() {
	m.name = nil
}

// AddMdrIDs adds the "mdrs" edge to the MeetingDateRoom entity by ids.
func (m *RoomMutation) AddMdrIDs(ids ...int) {
	if m.mdrs == nil {
		m.mdrs = make(map[int]struct{})
	}
	for i := range ids {
		m.mdrs[ids[i]] = struct{}{}
	}
}

// ClearMdrs clears the "mdrs" edge to the MeetingDateRoom entity.
func (m *RoomMutation) ClearMdrs() {
	m.clearedmdrs = true
}

// MdrsCleared reports if the "mdrs" edge to the MeetingDateRoom entity was cleared.
func (m *RoomMutation) MdrsCleared() bool {
	return m.clearedmdrs
}

// RemoveMdrIDs removes the "mdrs" edge to the MeetingDateRoom entity by IDs.
func (m *RoomMutation) RemoveMdrIDs(ids ...int) {
	if m.removedmdrs == nil {
		m.removedmdrs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.mdrs, ids[i])
		m.removedmdrs[ids[i]] = struct{}{}
	}
}

// RemovedMdrs returns the removed IDs of the "mdrs" edge to the MeetingDateRoom entity.
func (m *RoomMutation) RemovedMdrsIDs() (ids []int) {
	for id := range m.removedmdrs {
		ids = append(ids, id)
	}
	return
}

// MdrsIDs returns the "mdrs" edge IDs in the mutation.
func (m *RoomMutation) MdrsIDs() (ids []int) {
	for id := range m.mdrs {
		ids = append(ids, id)
	}
	return
}

// ResetMdrs resets all changes to the "mdrs" edge.
func (m *RoomMutation) ResetMdrs() {
	m.mdrs = nil
	m.clearedmdrs = false
	m.removedmdrs = nil
}

// Where appends a list predicates to the RoomMutation builder.
func (m *RoomMutation) Where(ps ...predicate.Room) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoomMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoomMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Room, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoomMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, room.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case room.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case room.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case room.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	switch name {
	case room.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.mdrs != nil {
		edges = append(edges, room.EdgeMdrs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeMdrs:
		ids := make([]ent.Value, 0, len(m.mdrs))
		for id := range m.mdrs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmdrs != nil {
		edges = append(edges, room.EdgeMdrs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeMdrs:
		ids := make([]ent.Value, 0, len(m.removedmdrs))
		for id := range m.removedmdrs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmdrs {
		edges = append(edges, room.EdgeMdrs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	case room.EdgeMdrs:
		return m.clearedmdrs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeMdrs:
		m.ResetMdrs()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}
