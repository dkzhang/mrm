// Code generated by ent, DO NOT EDIT.

package meeting

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the meeting type in the database.
	Label = "meeting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldApplicant holds the string denoting the applicant field in the database.
	FieldApplicant = "applicant"
	// EdgeMdrs holds the string denoting the mdrs edge name in mutations.
	EdgeMdrs = "mdrs"
	// Table holds the table name of the meeting in the database.
	Table = "meetings"
	// MdrsTable is the table that holds the mdrs relation/edge.
	MdrsTable = "meeting_date_rooms"
	// MdrsInverseTable is the table name for the MeetingDateRoom entity.
	// It exists in this package in order to avoid circular dependency with the "meetingdateroom" package.
	MdrsInverseTable = "meeting_date_rooms"
	// MdrsColumn is the table column denoting the mdrs relation/edge.
	MdrsColumn = "meeting_mdrs"
)

// Columns holds all SQL columns for meeting fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldApplicant,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Meeting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByApplicant orders the results by the applicant field.
func ByApplicant(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicant, opts...).ToFunc()
}

// ByMdrsCount orders the results by mdrs count.
func ByMdrsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMdrsStep(), opts...)
	}
}

// ByMdrs orders the results by mdrs terms.
func ByMdrs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMdrsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMdrsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MdrsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MdrsTable, MdrsColumn),
	)
}
