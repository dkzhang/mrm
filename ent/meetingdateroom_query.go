// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"mrm/ent/meeting"
	"mrm/ent/meetingdateroom"
	"mrm/ent/predicate"
	"mrm/ent/room"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MeetingDateRoomQuery is the builder for querying MeetingDateRoom entities.
type MeetingDateRoomQuery struct {
	config
	ctx         *QueryContext
	order       []meetingdateroom.OrderOption
	inters      []Interceptor
	predicates  []predicate.MeetingDateRoom
	withMeeting *MeetingQuery
	withRoom    *RoomQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MeetingDateRoomQuery builder.
func (mdrq *MeetingDateRoomQuery) Where(ps ...predicate.MeetingDateRoom) *MeetingDateRoomQuery {
	mdrq.predicates = append(mdrq.predicates, ps...)
	return mdrq
}

// Limit the number of records to be returned by this query.
func (mdrq *MeetingDateRoomQuery) Limit(limit int) *MeetingDateRoomQuery {
	mdrq.ctx.Limit = &limit
	return mdrq
}

// Offset to start from.
func (mdrq *MeetingDateRoomQuery) Offset(offset int) *MeetingDateRoomQuery {
	mdrq.ctx.Offset = &offset
	return mdrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mdrq *MeetingDateRoomQuery) Unique(unique bool) *MeetingDateRoomQuery {
	mdrq.ctx.Unique = &unique
	return mdrq
}

// Order specifies how the records should be ordered.
func (mdrq *MeetingDateRoomQuery) Order(o ...meetingdateroom.OrderOption) *MeetingDateRoomQuery {
	mdrq.order = append(mdrq.order, o...)
	return mdrq
}

// QueryMeeting chains the current query on the "meeting" edge.
func (mdrq *MeetingDateRoomQuery) QueryMeeting() *MeetingQuery {
	query := (&MeetingClient{config: mdrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mdrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mdrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(meetingdateroom.Table, meetingdateroom.FieldID, selector),
			sqlgraph.To(meeting.Table, meeting.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, meetingdateroom.MeetingTable, meetingdateroom.MeetingColumn),
		)
		fromU = sqlgraph.SetNeighbors(mdrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoom chains the current query on the "room" edge.
func (mdrq *MeetingDateRoomQuery) QueryRoom() *RoomQuery {
	query := (&RoomClient{config: mdrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mdrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mdrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(meetingdateroom.Table, meetingdateroom.FieldID, selector),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, meetingdateroom.RoomTable, meetingdateroom.RoomColumn),
		)
		fromU = sqlgraph.SetNeighbors(mdrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MeetingDateRoom entity from the query.
// Returns a *NotFoundError when no MeetingDateRoom was found.
func (mdrq *MeetingDateRoomQuery) First(ctx context.Context) (*MeetingDateRoom, error) {
	nodes, err := mdrq.Limit(1).All(setContextOp(ctx, mdrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{meetingdateroom.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mdrq *MeetingDateRoomQuery) FirstX(ctx context.Context) *MeetingDateRoom {
	node, err := mdrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MeetingDateRoom ID from the query.
// Returns a *NotFoundError when no MeetingDateRoom ID was found.
func (mdrq *MeetingDateRoomQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mdrq.Limit(1).IDs(setContextOp(ctx, mdrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{meetingdateroom.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mdrq *MeetingDateRoomQuery) FirstIDX(ctx context.Context) int {
	id, err := mdrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MeetingDateRoom entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MeetingDateRoom entity is found.
// Returns a *NotFoundError when no MeetingDateRoom entities are found.
func (mdrq *MeetingDateRoomQuery) Only(ctx context.Context) (*MeetingDateRoom, error) {
	nodes, err := mdrq.Limit(2).All(setContextOp(ctx, mdrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{meetingdateroom.Label}
	default:
		return nil, &NotSingularError{meetingdateroom.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mdrq *MeetingDateRoomQuery) OnlyX(ctx context.Context) *MeetingDateRoom {
	node, err := mdrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MeetingDateRoom ID in the query.
// Returns a *NotSingularError when more than one MeetingDateRoom ID is found.
// Returns a *NotFoundError when no entities are found.
func (mdrq *MeetingDateRoomQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mdrq.Limit(2).IDs(setContextOp(ctx, mdrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{meetingdateroom.Label}
	default:
		err = &NotSingularError{meetingdateroom.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mdrq *MeetingDateRoomQuery) OnlyIDX(ctx context.Context) int {
	id, err := mdrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MeetingDateRooms.
func (mdrq *MeetingDateRoomQuery) All(ctx context.Context) ([]*MeetingDateRoom, error) {
	ctx = setContextOp(ctx, mdrq.ctx, "All")
	if err := mdrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MeetingDateRoom, *MeetingDateRoomQuery]()
	return withInterceptors[[]*MeetingDateRoom](ctx, mdrq, qr, mdrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mdrq *MeetingDateRoomQuery) AllX(ctx context.Context) []*MeetingDateRoom {
	nodes, err := mdrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MeetingDateRoom IDs.
func (mdrq *MeetingDateRoomQuery) IDs(ctx context.Context) (ids []int, err error) {
	if mdrq.ctx.Unique == nil && mdrq.path != nil {
		mdrq.Unique(true)
	}
	ctx = setContextOp(ctx, mdrq.ctx, "IDs")
	if err = mdrq.Select(meetingdateroom.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mdrq *MeetingDateRoomQuery) IDsX(ctx context.Context) []int {
	ids, err := mdrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mdrq *MeetingDateRoomQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mdrq.ctx, "Count")
	if err := mdrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mdrq, querierCount[*MeetingDateRoomQuery](), mdrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mdrq *MeetingDateRoomQuery) CountX(ctx context.Context) int {
	count, err := mdrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mdrq *MeetingDateRoomQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mdrq.ctx, "Exist")
	switch _, err := mdrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mdrq *MeetingDateRoomQuery) ExistX(ctx context.Context) bool {
	exist, err := mdrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MeetingDateRoomQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mdrq *MeetingDateRoomQuery) Clone() *MeetingDateRoomQuery {
	if mdrq == nil {
		return nil
	}
	return &MeetingDateRoomQuery{
		config:      mdrq.config,
		ctx:         mdrq.ctx.Clone(),
		order:       append([]meetingdateroom.OrderOption{}, mdrq.order...),
		inters:      append([]Interceptor{}, mdrq.inters...),
		predicates:  append([]predicate.MeetingDateRoom{}, mdrq.predicates...),
		withMeeting: mdrq.withMeeting.Clone(),
		withRoom:    mdrq.withRoom.Clone(),
		// clone intermediate query.
		sql:  mdrq.sql.Clone(),
		path: mdrq.path,
	}
}

// WithMeeting tells the query-builder to eager-load the nodes that are connected to
// the "meeting" edge. The optional arguments are used to configure the query builder of the edge.
func (mdrq *MeetingDateRoomQuery) WithMeeting(opts ...func(*MeetingQuery)) *MeetingDateRoomQuery {
	query := (&MeetingClient{config: mdrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mdrq.withMeeting = query
	return mdrq
}

// WithRoom tells the query-builder to eager-load the nodes that are connected to
// the "room" edge. The optional arguments are used to configure the query builder of the edge.
func (mdrq *MeetingDateRoomQuery) WithRoom(opts ...func(*RoomQuery)) *MeetingDateRoomQuery {
	query := (&RoomClient{config: mdrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mdrq.withRoom = query
	return mdrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Date int `json:"date,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MeetingDateRoom.Query().
//		GroupBy(meetingdateroom.FieldDate).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mdrq *MeetingDateRoomQuery) GroupBy(field string, fields ...string) *MeetingDateRoomGroupBy {
	mdrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MeetingDateRoomGroupBy{build: mdrq}
	grbuild.flds = &mdrq.ctx.Fields
	grbuild.label = meetingdateroom.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Date int `json:"date,omitempty"`
//	}
//
//	client.MeetingDateRoom.Query().
//		Select(meetingdateroom.FieldDate).
//		Scan(ctx, &v)
func (mdrq *MeetingDateRoomQuery) Select(fields ...string) *MeetingDateRoomSelect {
	mdrq.ctx.Fields = append(mdrq.ctx.Fields, fields...)
	sbuild := &MeetingDateRoomSelect{MeetingDateRoomQuery: mdrq}
	sbuild.label = meetingdateroom.Label
	sbuild.flds, sbuild.scan = &mdrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MeetingDateRoomSelect configured with the given aggregations.
func (mdrq *MeetingDateRoomQuery) Aggregate(fns ...AggregateFunc) *MeetingDateRoomSelect {
	return mdrq.Select().Aggregate(fns...)
}

func (mdrq *MeetingDateRoomQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mdrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mdrq); err != nil {
				return err
			}
		}
	}
	for _, f := range mdrq.ctx.Fields {
		if !meetingdateroom.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mdrq.path != nil {
		prev, err := mdrq.path(ctx)
		if err != nil {
			return err
		}
		mdrq.sql = prev
	}
	return nil
}

func (mdrq *MeetingDateRoomQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MeetingDateRoom, error) {
	var (
		nodes       = []*MeetingDateRoom{}
		withFKs     = mdrq.withFKs
		_spec       = mdrq.querySpec()
		loadedTypes = [2]bool{
			mdrq.withMeeting != nil,
			mdrq.withRoom != nil,
		}
	)
	if mdrq.withMeeting != nil || mdrq.withRoom != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, meetingdateroom.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MeetingDateRoom).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MeetingDateRoom{config: mdrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mdrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mdrq.withMeeting; query != nil {
		if err := mdrq.loadMeeting(ctx, query, nodes, nil,
			func(n *MeetingDateRoom, e *Meeting) { n.Edges.Meeting = e }); err != nil {
			return nil, err
		}
	}
	if query := mdrq.withRoom; query != nil {
		if err := mdrq.loadRoom(ctx, query, nodes, nil,
			func(n *MeetingDateRoom, e *Room) { n.Edges.Room = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mdrq *MeetingDateRoomQuery) loadMeeting(ctx context.Context, query *MeetingQuery, nodes []*MeetingDateRoom, init func(*MeetingDateRoom), assign func(*MeetingDateRoom, *Meeting)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MeetingDateRoom)
	for i := range nodes {
		if nodes[i].meeting_mdrs == nil {
			continue
		}
		fk := *nodes[i].meeting_mdrs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(meeting.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "meeting_mdrs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mdrq *MeetingDateRoomQuery) loadRoom(ctx context.Context, query *RoomQuery, nodes []*MeetingDateRoom, init func(*MeetingDateRoom), assign func(*MeetingDateRoom, *Room)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MeetingDateRoom)
	for i := range nodes {
		if nodes[i].room_mdrs == nil {
			continue
		}
		fk := *nodes[i].room_mdrs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(room.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "room_mdrs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mdrq *MeetingDateRoomQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mdrq.querySpec()
	_spec.Node.Columns = mdrq.ctx.Fields
	if len(mdrq.ctx.Fields) > 0 {
		_spec.Unique = mdrq.ctx.Unique != nil && *mdrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mdrq.driver, _spec)
}

func (mdrq *MeetingDateRoomQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(meetingdateroom.Table, meetingdateroom.Columns, sqlgraph.NewFieldSpec(meetingdateroom.FieldID, field.TypeInt))
	_spec.From = mdrq.sql
	if unique := mdrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mdrq.path != nil {
		_spec.Unique = true
	}
	if fields := mdrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, meetingdateroom.FieldID)
		for i := range fields {
			if fields[i] != meetingdateroom.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mdrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mdrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mdrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mdrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mdrq *MeetingDateRoomQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mdrq.driver.Dialect())
	t1 := builder.Table(meetingdateroom.Table)
	columns := mdrq.ctx.Fields
	if len(columns) == 0 {
		columns = meetingdateroom.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mdrq.sql != nil {
		selector = mdrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mdrq.ctx.Unique != nil && *mdrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mdrq.predicates {
		p(selector)
	}
	for _, p := range mdrq.order {
		p(selector)
	}
	if offset := mdrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mdrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MeetingDateRoomGroupBy is the group-by builder for MeetingDateRoom entities.
type MeetingDateRoomGroupBy struct {
	selector
	build *MeetingDateRoomQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mdrgb *MeetingDateRoomGroupBy) Aggregate(fns ...AggregateFunc) *MeetingDateRoomGroupBy {
	mdrgb.fns = append(mdrgb.fns, fns...)
	return mdrgb
}

// Scan applies the selector query and scans the result into the given value.
func (mdrgb *MeetingDateRoomGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mdrgb.build.ctx, "GroupBy")
	if err := mdrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MeetingDateRoomQuery, *MeetingDateRoomGroupBy](ctx, mdrgb.build, mdrgb, mdrgb.build.inters, v)
}

func (mdrgb *MeetingDateRoomGroupBy) sqlScan(ctx context.Context, root *MeetingDateRoomQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mdrgb.fns))
	for _, fn := range mdrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mdrgb.flds)+len(mdrgb.fns))
		for _, f := range *mdrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mdrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mdrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MeetingDateRoomSelect is the builder for selecting fields of MeetingDateRoom entities.
type MeetingDateRoomSelect struct {
	*MeetingDateRoomQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mdrs *MeetingDateRoomSelect) Aggregate(fns ...AggregateFunc) *MeetingDateRoomSelect {
	mdrs.fns = append(mdrs.fns, fns...)
	return mdrs
}

// Scan applies the selector query and scans the result into the given value.
func (mdrs *MeetingDateRoomSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mdrs.ctx, "Select")
	if err := mdrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MeetingDateRoomQuery, *MeetingDateRoomSelect](ctx, mdrs.MeetingDateRoomQuery, mdrs, mdrs.inters, v)
}

func (mdrs *MeetingDateRoomSelect) sqlScan(ctx context.Context, root *MeetingDateRoomQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mdrs.fns))
	for _, fn := range mdrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mdrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mdrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
